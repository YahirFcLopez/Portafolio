/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cliente;

import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Base64;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author yahir
 */
public class ClienteGui extends javax.swing.JFrame {
 private static String SERVER_ADDRESS = "192.168.84.18";
    private static final int PORT = 12345;
   
    private Socket socket;
    private PrintWriter out;
    public ClienteGui() {
      initComponents();
    
    // Bucle para solicitar la IP hasta que se establezca la conexión
    boolean connected = false;
    while (!connected) {
        // Solicitar la dirección IP del servidor
        SERVER_ADDRESS = JOptionPane.showInputDialog(this, "Ingrese la dirección IP del servidor:", "Conexión al servidor", JOptionPane.PLAIN_MESSAGE);

        if (SERVER_ADDRESS != null && !SERVER_ADDRESS.trim().isEmpty()) {
            try {
                // Intentar realizar la conexión con el servidor
                Socket testSocket = new Socket(SERVER_ADDRESS, PORT);
                testSocket.close();  // Si la conexión es exitosa, cerramos la conexión de prueba

                // Si la conexión es exitosa, iniciamos el hilo para la conexión real
                new Thread(this::connectToServer).start();
                connected = true;  // La conexión fue exitosa, salimos del bucle
            } catch (IOException e) {
                // Si ocurre un error al intentar conectarse, mostramos un mensaje de error
                JOptionPane.showMessageDialog(this, "No se pudo conectar al servidor. Verifique la dirección IP y el puerto.", "Error de conexión", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Dirección IP no válida.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
         
    }
    
 private void connectToServer() {
        try {
            // Establecer conexión con el servidor
            socket = new Socket(SERVER_ADDRESS, PORT);
            out = new PrintWriter(socket.getOutputStream(), true);

          
            // Escuchar respuestas del servidor
            try (BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {
                String response;
                while ((response = in.readLine()) != null) {
                    if (response.startsWith("IMAGE:")) {
                        String base64Image = response.substring(6);

                        // Decodificar la imagen base64
                        byte[] imageBytes = Base64.getDecoder().decode(base64Image);
                        ByteArrayInputStream bis = new ByteArrayInputStream(imageBytes);
                        BufferedImage image = ImageIO.read(bis);

                        // Mostrar la imagen en el label
                        ImageIcon icon = new ImageIcon(image);
                        SwingUtilities.invokeLater(() -> {
                            imageLabel.setIcon(icon);
                            imageLabel.repaint();
                        });
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "No se pudo conectar al servidor.", "Error de conexión", JOptionPane.ERROR_MESSAGE);
        }
    }
 public void manejarMensajes(String message) {
        if (message.startsWith("ESPERAR")) {
            // Extraemos el mensaje que contiene la indicación de espera
            String[] partes = message.split(":");
            if (partes.length == 2) {
                // Mostramos un JOptionPane con el mensaje
                JOptionPane.showMessageDialog(null, partes[1], "Turno del Jugador", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }
    private void enviarComando(int jugador) {
        if (out != null) {
            String comando = "PLAYER:" + jugador + ":AVANZAR";
            out.println(comando);
            System.out.println("Comando enviado: " + comando);
        } else {
            System.out.println("No hay conexión activa con el servidor.");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(imageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 25, 595, 570));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Jugador 1", "Jugador 2", "Jugador 3", "Jugador 4" }));
        jPanel1.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 190, -1));

        jButton1.setText("AVANZAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 0, 160, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         int jugadorSeleccionado = jComboBox1.getSelectedIndex() + 1; // 1-4
                enviarComando(jugadorSeleccionado);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClienteGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClienteGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClienteGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClienteGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel imageLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
